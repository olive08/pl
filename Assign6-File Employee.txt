	     /*Assignment 6*/	
		/*Input*/

#include<stdio.h>
struct Fullname
{
char First[10],Last[10],Middle[10];
};
struct Employee
{
struct Fullname Name;
int Emp_Id;
float Salary;
char Post[15];
};
//Check Duplicate data
int Duplicate(char *File_Name,int Id)
{
FILE *Ptr;
int Flag=0;
struct Employee Emp_Obj;
Ptr=fopen(File_Name,"r");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {
     fread(&Emp_Obj,sizeof(Emp_Obj),1,Ptr);
     while(!feof(Ptr))
     {  if(Id==Emp_Obj.Emp_Id)
       { fclose(Ptr); 
	return 1;}
       fread(&Emp_Obj,sizeof(Emp_Obj),1,Ptr);
       }
    fclose(Ptr);
   }
return Flag;
}

//Create New File
void Create(char *File_Name)
{
FILE *Ptr;
char Answer;
printf("\nEnter File Name");
scanf("%s",File_Name);
if((Ptr=fopen(File_Name,"r"))!=NULL)
{
printf("\nFile already exist");
printf("\nDo u want to remove this File (y/n)");
scanf(" %c",&Answer);
}
if(Answer=='y' || Answer=='Y' || Ptr==NULL)
if((Ptr=fopen(File_Name,"w"))!=NULL)
printf("\nFile Created Successfully");
else printf("File creation Error...");
fclose(Ptr);
}
//Insert or Append data in existing File
void Insert(char *File_Name)
{
int Num,I,J,Id,Flag,Ch;
float Sal;
struct Employee Emp_Obj;
FILE *Ptr;
    printf("\n How many records u want to insert");
    scanf("%d",&Num);
    for(I=1;I<=Num;I++)
       {
	 Ptr=fopen(File_Name,"a");
	 if(Ptr!=NULL)
	 {

       printf("\nEnter Employee data:");
       do
       {
       printf("\nFirst Name"); 
	scanf("%s",Emp_Obj.Name.First);
       J=0;Flag=0;
       while(Emp_Obj.Name.First[J]!='\0')
       {
	if((Emp_Obj.Name.First[J]>='a' &&Emp_Obj.Name.First[J]<='z')||(Emp_Obj.Name.First[J]>='A'&&Emp_Obj.Name.First[J]<='Z'))
	 J++;
       else {Flag=1;break;}}
       if(Flag==1)
       printf("\nReenter First name");
       }while(Flag!=0);
       printf("\nMiddle Name:");
	scanf("%s",Emp_Obj.Name.Middle);
       printf("\nLast Name"); 
	scanf("%s",Emp_Obj.Name.Last);
       while(1)  //Check for Existance/Nagative  value Employee Id
       {
	  printf("\nEmployee Id:");
	scanf("%d",&Id);
	if(Id > 0 && !Duplicate(File_Name,Id) )
	  { Emp_Obj.Emp_Id=Id; break;}
	  printf("\nEmployee Id already present/Negative Id re-enter\n");
	}
       while(1) //Check for Negative Salary
       {
	 printf("\nSalary: ");scanf("%f",&Sal);
	 if(Sal>0)
	 { Emp_Obj.Salary=Sal; break;}
	 printf("\nNegative Salary Reenter Salary ");
       }
        printf("Post: ");
	scanf("%s",Emp_Obj.Post);
        fwrite(&Emp_Obj,sizeof(struct Employee),1,Ptr);

	fclose(Ptr);
       }
else
       printf("File Opening Error...");
}
}
//Search & print details of given Employee Id
int Retrive(char *File_Name)
{
FILE *Ptr;
int Id,Flag=0,I=0;
struct Employee Emp_Obj;
Ptr=fopen(File_Name,"r");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {

       printf("\nEnter Employee Id which u want to Retrive/Modify/Delete");
       scanf("%d",&Id);
       fread(&Emp_Obj,sizeof(Emp_Obj),1,Ptr);
       while(!feof(Ptr))
       {
       if(Id==Emp_Obj.Emp_Id)
       {
       printf("\n------------------------------------------------------------------------");
       printf("\n\tName\t\tEmployee Id\t   Salary\t  Post");
       printf("\n------------------------------------------------------------------------");
       printf("\n%s",Emp_Obj.Name.First);
       printf(" %s",Emp_Obj.Name.Middle);
       printf(" %s",Emp_Obj.Name.Last);
       printf("\t%d",Emp_Obj.Emp_Id);
       printf("\t\t%5.2f",Emp_Obj.Salary);
       printf("\t%s",Emp_Obj.Post);
       Flag=1;
       break;
       }
       I++;
       fread(&Emp_Obj,sizeof(Emp_Obj),1,Ptr);
       }
       if( Flag==0)
	  I=-1;
    fclose(Ptr);
   }
return I;
}

//Modify salary & post of given employee(Using fseek Funtion)
void Modify(char *File_Name)
{
FILE *Ptr;
int Pos;
struct Employee Emp_Obj;
Ptr=fopen(File_Name,"r+");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {
       Pos=Retrive(File_Name);
       if(Pos!=-1)
       {
       fseek(Ptr,Pos*sizeof(struct Employee),SEEK_SET);
       fread(&Emp_Obj,sizeof(Emp_Obj),1,Ptr);
       printf("\nEnter Modified Employee data:");
       printf("Salary: ");
	scanf("%f",&Emp_Obj.Salary);
       printf("Post: ");
	scanf("%s",Emp_Obj.Post);
       fseek(Ptr,Pos*sizeof(struct Employee),SEEK_SET);
       fwrite(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       fclose(Ptr);
       }
       else printf("\nRecord Not resent");
   }
}
//Modify salary & post of given employee(Using Temp File)
void Modify1(char *File_Name)
{
FILE *Ptr,*Temp;
struct Employee Emp_Obj;
int I=0,Pos;
Ptr=fopen(File_Name,"r");
Temp=fopen("Temp.txt","w");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {
       Pos=Retrive(File_Name);
       if(Pos!=-1)
       {
       fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       while(!feof(Ptr))
       {
       if(Pos==I)
       {
       printf("\nEnter Modified Employee data:");
       printf("Salary: ");
	scanf("%f",&Emp_Obj.Salary);
       printf("Post: ");
	scanf("%s",Emp_Obj.Post);
       }
       fwrite(&Emp_Obj,sizeof(struct Employee),1,Temp);
       I++;
       fread(&Emp_Obj,sizeof(Emp_Obj),1,Ptr);
       }
       fclose(Ptr);
       fclose(Temp);
       remove(File_Name);
       rename("Temp.txt",File_Name);
       }
       else printf("Record Not present");

   }
}
//Remove Given Employee data(Using Temp File)
void Delete(char *File_Name)
{
FILE *Ptr,*Temp;
struct Employee Emp_Obj;
int Pos,I=0;
Ptr=fopen(File_Name,"r");
Temp=fopen("Temp.txt","w");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {
       Pos=Retrive(File_Name);
       if(Pos!=-1)
       {
       fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       while(!feof(Ptr))
       {
       if(Pos!=I)
	 fwrite(&Emp_Obj,sizeof(struct Employee),1,Temp);
       I++;
       fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       }
       fclose(Ptr);
       fclose(Temp);
       remove(File_Name);
       rename("Temp.txt",File_Name);
       }
       else printf("Record Not present");

   }
}

//Remove Given Employee data(Using fseek)
void Delete1(char *File_Name)
{
FILE *Ptr,*Temp;
struct Employee Emp_Obj;
int Pos;
Temp=Ptr=fopen(File_Name,"r+");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {
       Pos=Retrive(File_Name);
       if(Pos!=-1)
       {
       fseek(Temp,(Pos+1)*sizeof(struct Employee),0);
	fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       while(!feof(Ptr))
       {
       fseek(Ptr,Pos*sizeof(struct Employee),0);
       fwrite(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       Pos++;
       fseek(Temp,(Pos+1)*sizeof(struct Employee),0);
       fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       }
       }
       else printf("Record Not present");
    fclose(Ptr);
    fclose(Temp);
   }
}

//print contents of the given File
void Display(char *File_Name)
{
FILE *Ptr;
struct Employee Emp_Obj;
Ptr=fopen(File_Name,"r");
if(Ptr==NULL)
printf("\nFile Opening Error");
else
   {
       printf("\n------------------------------------------------------------------------");
       printf("\n\t\tName\t\t   Id\t  Salary\t   Post");
       printf("\n------------------------------------------------------------------------");
       fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       while(!feof(Ptr))
       {
       printf("\n%10s",Emp_Obj.Name.First);
       printf("%10s",Emp_Obj.Name.Middle);
       printf("%10s |",Emp_Obj.Name.Last);
       printf("\t%9d |",Emp_Obj.Emp_Id);
       printf("\t%9f |",Emp_Obj.Salary);
       printf("%9s",Emp_Obj.Post);
       fread(&Emp_Obj,sizeof(struct Employee),1,Ptr);
       }
    fclose(Ptr);
   }
}

void main()
{
char File_Name[10],Ans;
int Choice;
printf("\n\t\t\tFile Creation");
Create(File_Name);
do
{
printf("\nChoices:\n1:Insert\n2: Display\n3:Retrive\n4:Modify\n5:Delete\n");
scanf("%d",&Choice);
switch(Choice)
{
case 1: printf("\n\t\t\tInsert Operation");
	Insert(File_Name);
	Display(File_Name);
	break;
case 2: printf("\n\t\t\tDisplay Operation");
	Display(File_Name);
	break;
case 3: printf("\n\t\t\tSearch Operation");
	if(Retrive(File_Name)==-1)
	printf("\nRecord Not Present");
	break;
case 4: printf("\n\t\t\tModify Operation");
	Modify1(File_Name);
	Display(File_Name);
	break;
case 5: printf("\n\t\t\tDelete Operation");
	Delete(File_Name);
	Display(File_Name);
	break;

default: printf("\nInvalid Choice\n");
}
printf("\n\nDo u want to Continue :");
scanf(" %c",&Ans);
}while(Ans=='y' || Ans=='Y');
}
					
		
	